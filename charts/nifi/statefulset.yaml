---
# Source: nifi/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-nifi
  labels:
    app: "nifi"
    chart: "nifi-1.2.1"
    release: "my-nifi"
    heritage: "Helm"
spec:
  podManagementPolicy: Parallel
  serviceName: my-nifi-headless
  replicas: 4
  selector:
    matchLabels:
      app: nifi
      release: my-nifi
  template:
    metadata:
      annotations:
        security.alpha.kubernetes.io/sysctls: net.ipv4.ip_local_port_range=10000 65000
      labels:
        app: "nifi"
        chart: "nifi-1.2.1"
        release: "my-nifi"
        heritage: "Helm"
    spec:
      serviceAccountName: default
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "app"
                      operator: In
                      values:
                        - "nifi"
                topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 30
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      initContainers:
        - name: zookeeper
          imagePullPolicy: "IfNotPresent"
          image: "busybox:1.32.0"
          command:
            - sh
            - -c
            - |
              echo trying to contact my-nifi-zookeeper 2181
              until nc -vzw 1 my-nifi-zookeeper 2181; do
                echo "waiting for zookeeper..."
                sleep 2
              done
      containers:
        - name: server
          imagePullPolicy: "IfNotPresent"
          image: "apache/nifi:1.23.2"
          command:
            - bash
            - -ce
            - |
              prop_replace () {
                target_file=${NIFI_HOME}/conf/${3:-nifi.properties}
                echo "updating ${1} in ${target_file}"
                if egrep "^${1}=" ${target_file} &> /dev/null; then
                  sed -i -e "s|^$1=.*$|$1=$2|"  ${target_file}
                else
                  echo ${1}=${2} >> ${target_file}
                fi
              }
              mkdir -p ${NIFI_HOME}/config-data/conf
              FQDN=$(hostname -f)

              cat "${NIFI_HOME}/conf/nifi.temp" > "${NIFI_HOME}/conf/nifi.properties"
              bin/nifi.sh set-single-user-credentials username changemechangeme


              if ! test -f /opt/nifi/data/flow.xml.gz && test -f /opt/nifi/data/flow.xml; then
                gzip /opt/nifi/data/flow.xml
              fi


              prop_replace nifi.ui.banner.text $(hostname -s)
              prop_replace nifi.remote.input.host ${FQDN}
              prop_replace nifi.cluster.node.address ${FQDN}
              prop_replace nifi.zookeeper.connect.string ${NIFI_ZOOKEEPER_CONNECT_STRING}
              prop_replace nifi.web.http.host ${FQDN}
              prop_replace nifi.web.proxy.host my-nifi.nifi.svc
              xmlstarlet ed --inplace --delete "authorizers/accessPolicyProvider/property[@name='Node Identity 1']" "${NIFI_HOME}/conf/authorizers.xml"

              xmlstarlet ed --inplace \
                            --subnode "authorizers/accessPolicyProvider" --type 'elem' -n 'property' \
                              --value "CN=my-nifi-0.my-nifi-headless.nifi.svc.cluster.local, OU=NIFI" \
                            --insert "authorizers/accessPolicyProvider/property[not(@name)]" --type attr -n name \
                              --value "Node Identity 0" \
                            "${NIFI_HOME}/conf/authorizers.xml"
              xmlstarlet ed --inplace \
                            --subnode "authorizers/userGroupProvider" --type 'elem' -n 'property' \
                              --value "CN=my-nifi-0.my-nifi-headless.nifi.svc.cluster.local, OU=NIFI" \
                            --insert "authorizers/userGroupProvider/property[not(@name)]" --type attr -n name \
                              --value "Initial User Identity 0" \
                            "${NIFI_HOME}/conf/authorizers.xml"

              xmlstarlet ed --inplace \
                            --subnode "authorizers/accessPolicyProvider" --type 'elem' -n 'property' \
                              --value "CN=my-nifi-1.my-nifi-headless.nifi.svc.cluster.local, OU=NIFI" \
                            --insert "authorizers/accessPolicyProvider/property[not(@name)]" --type attr -n name \
                              --value "Node Identity 1" \
                            "${NIFI_HOME}/conf/authorizers.xml"
              xmlstarlet ed --inplace \
                            --subnode "authorizers/userGroupProvider" --type 'elem' -n 'property' \
                              --value "CN=my-nifi-1.my-nifi-headless.nifi.svc.cluster.local, OU=NIFI" \
                            --insert "authorizers/userGroupProvider/property[not(@name)]" --type attr -n name \
                              --value "Initial User Identity 1" \
                            "${NIFI_HOME}/conf/authorizers.xml"

              xmlstarlet ed --inplace \
                            --subnode "authorizers/accessPolicyProvider" --type 'elem' -n 'property' \
                              --value "CN=my-nifi-2.my-nifi-headless.nifi.svc.cluster.local, OU=NIFI" \
                            --insert "authorizers/accessPolicyProvider/property[not(@name)]" --type attr -n name \
                              --value "Node Identity 2" \
                            "${NIFI_HOME}/conf/authorizers.xml"
              xmlstarlet ed --inplace \
                            --subnode "authorizers/userGroupProvider" --type 'elem' -n 'property' \
                              --value "CN=my-nifi-2.my-nifi-headless.nifi.svc.cluster.local, OU=NIFI" \
                            --insert "authorizers/userGroupProvider/property[not(@name)]" --type attr -n name \
                              --value "Initial User Identity 2" \
                            "${NIFI_HOME}/conf/authorizers.xml"


              prop_replace nifi.security.keystore "${NIFI_HOME}/tls/keystore.jks"
              prop_replace nifi.security.keystoreType JKS
              prop_replace nifi.security.keystorePasswd "changeme"
              prop_replace nifi.security.truststore "${NIFI_HOME}/tls/truststore.jks"
              prop_replace nifi.security.truststoreType JKS
              prop_replace nifi.security.truststorePasswd "changeme"

              prop_replace nifi.web.https.host "$(hostname).my-nifi-headless.nifi.svc.cluster.local"
              prop_replace nifi.cluster.node.address "$(hostname).my-nifi-headless.nifi.svc.cluster.local"
              prop_replace nifi.web.https.network.interface.default eth0
              prop_replace nifi.web.https.network.interface.lo lo
              prop_replace nifi.web.http.host ""
              prop_replace nifi.web.http.port ""

              prop_replace nifi.security.autoreload.enabled true
              prop_replace nifi.security.autoreload.interval "300 secs"

              while [ ! -r "${NIFI_HOME}/tls/truststore.jks" ]
              do
                echo "${NIFI_HOME}/tls/truststore.jks" is not readable!  Waiting for cert-manager sidecar to populate it.
                sleep 2
              done

              while [ ! -r "${NIFI_HOME}/tls/keystore.jks" ]
              do
                echo "${NIFI_HOME}/tls/keystore.jks" is not readable!  Waiting for cert-manager sidecar to populate it.
                sleep 2
              done
              prop_replace nifi.web.http.network.interface.default "eth0" nifi.properties
              prop_replace nifi.web.http.network.interface.lo "lo" nifi.properties

              for f in "${NIFI_HOME}/conf/authorizers.xml" "${NIFI_HOME}/conf/login-identity-providers.xml" ${NIFI_HOME}/conf/nifi.properties
              do
                echo === $f ===
                cat $f
              done
              echo === end of files ===

              function prop () {
                target_file=${NIFI_HOME}/conf/nifi.properties
                egrep "^${1}=" ${target_file} | cut -d'=' -f2
              }

              function offloadNode() {
                  FQDN=$(hostname -f)
                  echo "disconnecting node '$FQDN'"
                  baseUrl=https://${FQDN}:8443

                  echo "keystoreType=$(prop nifi.security.keystoreType)" > secure.properties
                  echo "keystore=$(prop nifi.security.keystore)" >> secure.properties
                  echo "keystorePasswd=$(prop nifi.security.keystorePasswd)" >> secure.properties
                  echo "truststoreType=$(prop nifi.security.truststoreType)" >> secure.properties
                  echo "truststore=$(prop nifi.security.truststore)" >> secure.properties
                  echo "truststorePasswd=$(prop nifi.security.truststorePasswd)" >> secure.properties
                  echo "proxiedEntity=CN=admin, OU=NIFI" >> secure.properties
                 
                  secureArgs="-p secure.properties"

                  echo baseUrl ${baseUrl}
                  echo "gracefully disconnecting node '$FQDN' from cluster"
                  ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi get-nodes -ot json -u ${baseUrl} ${secureArgs} > nodes.json
                  nnid=$(jq --arg FQDN "$FQDN" '.cluster.nodes[] | select(.address==$FQDN) | .nodeId' nodes.json)
                  echo "disconnecting node ${nnid}"
                  ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi disconnect-node -nnid $nnid -u ${baseUrl} ${secureArgs}
                  echo ""
                  echo "get a connected node"
                  connectedNode=$(jq -r 'first(.cluster.nodes|=sort_by(.address)| .cluster.nodes[] | select(.status=="CONNECTED")) | .address' nodes.json)
                  baseUrl=https://${connectedNode}:8443
                  echo baseUrl ${baseUrl}
                  echo ""
                  echo "wait until node has state 'DISCONNECTED'"
                  while [[ "${node_state}" != "DISCONNECTED" ]]; do
                      sleep 1
                      ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi get-nodes -ot json -u ${baseUrl} ${secureArgs} > nodes.json
                      node_state=$(jq -r --arg FQDN "$FQDN" '.cluster.nodes[] | select(.address==$FQDN) | .status' nodes.json)
                      echo "state is '${node_state}'"
                  done
                  echo ""
                  echo "node '${nnid}' was disconnected"
                  echo "offloading node"
                  ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi offload-node -nnid $nnid -u ${baseUrl} ${secureArgs}
                  echo ""
                  echo "wait until node has state 'OFFLOADED'"
                  while [[ "${node_state}" != "OFFLOADED" ]]; do
                      sleep 1
                      ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi get-nodes -ot json -u ${baseUrl} ${secureArgs} > nodes.json
                      node_state=$(jq -r --arg FQDN "$FQDN" '.cluster.nodes[] | select(.address==$FQDN) | .status' nodes.json)
                      echo "state is '${node_state}'"
                  done
              }

              deleteNode() {
                  echo "deleting node"
                  ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi delete-node -nnid ${nnid} -u ${baseUrl} ${secureArgs}
                  echo "node deleted"
              }

              executeTrap() {
                 echo Received trapped signal, beginning shutdown...;
                 offloadNode;
                 ./bin/nifi.sh stop;
                 deleteNode;
                 exit 0;
              }

              trap executeTrap TERM HUP INT;
              trap ":" EXIT

              exec bin/nifi.sh run & nifi_pid="$!"
              echo NiFi running with PID ${nifi_pid}.
              wait ${nifi_pid}

          resources: {}
          ports:
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 6007
              name: cluster
              protocol: TCP
          env:
            - name: NIFI_ZOOKEEPER_CONNECT_STRING
              value: my-nifi-zookeeper:2181
            - name: NIFI_WEB_HTTPS_HOST
              value: 0.0.0.0
          readinessProbe:
            initialDelaySeconds: 60
            periodSeconds: 20
            tcpSocket:
              port: 8443
          #           exec:
          #             command:
          #             - bash
          #             - -c
          #             - |
          #
          #               curl -kv \
          #                 --cert ${NIFI_HOME}/config-data/certs/admin/crt.pem --cert-type PEM \
          #                 --key ${NIFI_HOME}/config-data/certs/admin/key.pem --key-type PEM \
          #                 https://$(hostname -f):8443/nifi-api/controller/cluster > $NIFI_BASE_DIR/data/cluster.state
          #
          #               STATUS=$(jq -r ".cluster.nodes[] | select((.address==\"$(hostname -f)\") or .address==\"localhost\") | .status" $NIFI_BASE_DIR/data/cluster.state)

          #               if [[ ! $STATUS = "CONNECTED" ]]; then
          #                 echo "Node not found with CONNECTED state. Full cluster state:"
          #                 jq . $NIFI_BASE_DIR/data/cluster.state
          #                 exit 1
          #               fi
          livenessProbe:
            initialDelaySeconds: 90
            periodSeconds: 60
            tcpSocket:
              port: 8443
          volumeMounts:
            - mountPath: /opt/nifi/nifi-current/logs
              name: "logs"
            - mountPath: /opt/nifi/data
              name: "data"
            - mountPath: /opt/nifi/nifi-current/auth-conf/
              name: "auth-conf"
            - mountPath: /opt/nifi/nifi-current/config-data
              name: "config-data"
            - mountPath: /opt/nifi/flowfile_repository
              name: "flowfile-repository"
            - mountPath: /opt/nifi/content_repository
              name: "content-repository"
            - mountPath: /opt/nifi/provenance_repository
              name: "provenance-repository"
            - name: "bootstrap-conf"
              mountPath: /opt/nifi/nifi-current/conf/bootstrap.conf
              subPath: "bootstrap.conf"
            - name: "nifi-properties"
              mountPath: /opt/nifi/nifi-current/conf/nifi.temp
              subPath: "nifi.temp"
            - name: "authorizers-temp"
              mountPath: /opt/nifi/nifi-current/conf/authorizers.temp
              subPath: "authorizers.temp"
            - name: "bootstrap-notification-services-xml"
              mountPath: /opt/nifi/nifi-current/conf/bootstrap-notification-services.xml
              subPath: "bootstrap-notification-services.xml"
            - name: "login-identity-providers-ldap-xml"
              mountPath: /opt/nifi/nifi-current/conf/login-identity-providers-ldap.xml
              subPath: "login-identity-providers-ldap.xml"
            - name: "state-management-xml"
              mountPath: /opt/nifi/nifi-current/conf/state-management.xml
              subPath: "state-management.xml"
            - name: "zookeeper-properties"
              mountPath: /opt/nifi/nifi-current/conf/zookeeper.properties
              subPath: "zookeeper.properties"
            - name: "flow-content"
              mountPath: /opt/nifi/data/flow.xml
              subPath: "flow.xml"
            - name: "tls"
              mountPath: /opt/nifi/nifi-current/tls
              readOnly: true
        - name: app-log
          imagePullPolicy: "IfNotPresent"
          image: "busybox:1.32.0"
          args:
            - /bin/sh
            - -c
            - trap "exit 0" TERM; tail -n+1 -F /var/log/nifi-app.log & wait $!
          resources:
            limits:
              cpu: 50m
              memory: 50Mi
            requests:
              cpu: 10m
              memory: 10Mi
          volumeMounts:
            - mountPath: /var/log
              name: "logs"
        - name: bootstrap-log
          imagePullPolicy: "IfNotPresent"
          image: "busybox:1.32.0"
          args:
            - /bin/sh
            - -c
            - trap "exit 0" TERM; tail -n+1 -F /var/log/nifi-bootstrap.log & wait $!
          resources:
            limits:
              cpu: 50m
              memory: 50Mi
            requests:
              cpu: 10m
              memory: 10Mi
          volumeMounts:
            - mountPath: /var/log
              name: "logs"
        - name: user-log
          imagePullPolicy: "IfNotPresent"
          image: "busybox:1.32.0"
          args:
            - /bin/sh
            - -c
            - trap "exit 0" TERM; tail -n+1 -F /var/log/nifi-user.log & wait $!
          resources:
            limits:
              cpu: 50m
              memory: 50Mi
            requests:
              cpu: 10m
              memory: 10Mi
          volumeMounts:
            - mountPath: /var/log
              name: "logs"
        - name: cert-manager
          imagePullPolicy: "IfNotPresent"
          image: "apache/nifi:1.23.2"
          command:
            - bash
            - -ce
            - |
              trap "exit 0" TERM

              NODENAME=$(hostname)
              mkdir -p "${NIFI_HOME}"/tls/cert-manager

              # Note opportunity here to inject additional trusted certs named ca.crt in other
              # subdirectories of /opt/nifi/nifi-current/tls/, using custom secrets and/or configmaps.
              # If any of those trusted certs expire then you will need to restart the pod to pick
              # them up, as the truststore is only created at pod startup and Kubernetes won't
              # update secrets mounted as subPaths anyway.
              # c.f. https://kubernetes.io/docs/concepts/storage/volumes/#secret

              function pullNodeSecretData() {
                rm -f /tmp/secret.json /tmp/secret-data.json
                curl --cacert /run/secrets/kubernetes.io/secret-reader-token/ca.crt \
                     -H "Authorization: Bearer $(cat /run/secrets/kubernetes.io/secret-reader-token/token)" \
                     https://kubernetes.default.svc/api/v1/namespaces/$(cat /run/secrets/kubernetes.io/secret-reader-token/namespace)/secrets/$(hostname) \
                     --output /tmp/secret.json
                jq .data < /tmp/secret.json > /tmp/secret-data.json
                rm -f /tmp/secret.json
              }       

              pullNodeSecretData
              jq -r '."ca.crt"' < /tmp/secret-data.json | base64 -d > "${NIFI_HOME}"/tls/cert-manager/ca.crt
              touch /tmp/tls.crt.old
                
              rm -f "${NIFI_HOME}/tls/truststore-new.jks"
              for ca in "${NIFI_HOME}"/tls/*/ca.crt
              do
                ALIAS=$(echo $ca | awk -F "/" '{print $(NF-1) }' -)
                keytool -import \
                        -noprompt \
                        -trustcacerts \
                        -alias $ALIAS \
                        -storetype JKS \
                        -file $ca \
                        -keystore "${NIFI_HOME}/tls/truststore-new.jks" \
                        -storepass "changeme"
              done
              keytool -list -keystore "${NIFI_HOME}/tls/truststore-new.jks" \
                            -storepass "changeme"
              mv "${NIFI_HOME}/tls/truststore-new.jks" "${NIFI_HOME}/tls/truststore.jks"

              while :
              do
                pullNodeSecretData
                jq -r '."tls.crt"' < /tmp/secret-data.json | base64 -d > /tmp/tls.crt
                jq -r '."tls.key"' < /tmp/secret-data.json | base64 -d > /tmp/tls.key
                if ! diff /tmp/tls.crt.old /tmp/tls.crt > /dev/null
                then
                  openssl pkcs12 -export -in      "/tmp/tls.crt" \
                                         -inkey   "/tmp/tls.key" \
                                         -name    "${NODENAME}" \
                                         -out     "/tmp/tls.p12" \
                                         -passout "pass:changeme"
                  rm -f "${NIFI_HOME}/tls/keystore-new.jks"
                  keytool -importkeystore \
                          -noprompt \
                          -destkeystore "${NIFI_HOME}/tls/keystore-new.jks" \
                          -srckeystore "/tmp/tls.p12" \
                          -srcstoretype PKCS12 \
                          -deststoretype JKS \
                          -srcstorepass "changeme" \
                          -deststorepass "changeme"
                  mv  "${NIFI_HOME}/tls/keystore-new.jks" "${NIFI_HOME}/tls/keystore.jks"
                  mv /tmp/tls.crt /tmp/tls.crt.old
                fi

                ls -l "${NIFI_HOME}/tls/keystore.jks"
                keytool -list -keystore "${NIFI_HOME}/tls/keystore.jks" \
                              -storepass "changeme"

                echo Starting to sleep for 300 seconds at $(date)
                sleep 300
              done
          volumeMounts:
            - name: "tls"
              mountPath: /opt/nifi/nifi-current/tls
            - name: secret-reader-token
              mountPath: /run/secrets/kubernetes.io/secret-reader-token

          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
      volumes:
        - name: "bootstrap-conf"
          configMap:
            name: my-nifi-config
            items:
              - key: "bootstrap.conf"
                path: "bootstrap.conf"
        - name: "nifi-properties"
          configMap:
            name: my-nifi-config
            items:
              - key: "nifi.properties"
                path: "nifi.temp"
        - name: "authorizers-temp"
          configMap:
            name: my-nifi-config
            items:
              - key: "authorizers.xml"
                path: "authorizers.temp"
        - name: "bootstrap-notification-services-xml"
          configMap:
            name: my-nifi-config
            items:
              - key: "bootstrap-notification-services.xml"
                path: "bootstrap-notification-services.xml"
        - name: "login-identity-providers-ldap-xml"
          configMap:
            name: my-nifi-config
            items:
              - key: "login-identity-providers-ldap.xml"
                path: "login-identity-providers-ldap.xml"
        - name: "state-management-xml"
          configMap:
            name: my-nifi-config
            items:
              - key: "state-management.xml"
                path: "state-management.xml"
        - name: "zookeeper-properties"
          configMap:
            name: my-nifi-config
            items:
              - key: "zookeeper.properties"
                path: "zookeeper.properties"
        - name: "flow-content"
          configMap:
            name: my-nifi-config
            items:
              - key: "flow.xml"
                path: "flow.xml"
        - name: secret-reader-token
          secret:
            secretName: my-nifi-secret-reader-token
        - name: tls
          emptyDir: {}
        - name: config-data
          emptyDir: {}
        - name: auth-conf
          emptyDir: {}
        - name: data
          emptyDir: {}
        - name: flowfile-repository
          emptyDir: {}
        - name: content-repository
          emptyDir: {}
        - name: provenance-repository
          emptyDir: {}
        - name: logs
          emptyDir: {}
